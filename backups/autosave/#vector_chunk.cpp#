#include <boost/interprocess/managed_shared_memory.hpp>
#include <boost/interprocess/containers/vector.hpp>
#include <boost/interprocess/allocators/allocator.hpp>

template <class T>
class vector_chunk {
public:

  explicit vector_chunk()
  

  using namespace boost::interprocess;
  // Erase previous shared memory with the name
  // to be used and create the memory segment at the specified address and initialize resources
  shared_memory_object::remove("VectorChunk");
  managed_shared_memory segment (create_only, "VectorChunk", 65536);
  //Alias an STL compatible allocator of ints that allocates ints from the managed
  //shared memory segment.  This allocator will allow to place containers
  //in managed shared memory segments
  typedef allocator<T, managed_shared_memory::segment_manager> ShmemAllocator;

  //Alias a vector that uses the previous STL-like allocator
  typedef vector<T, ShmemAllocator> MyVector;

  //Initialize shared memory STL-compatible allocator
  const ShmemAllocator alloc_inst (segment.get_segment_manager());

  //Construct a shared memory
  MyVector *myvector =
    segment.construct<MyVector>("MyVector") //object name
    (alloc_inst);//first ctor parameter

  //Insert data in the vector
  for(int i = 0; i < 100; ++i){
    myvector->push_back(i);
  }
}
  catch(...){
    shared_memory_object::remove("VectorChunk");
    throw;
  }
  shared_memory_object::remove("VectorChunk");
  return 0;
}
