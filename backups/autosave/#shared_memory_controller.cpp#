#include <boost/interprocess/managed_shared_memory.hpp>
#include <boost/interprocess/allocators/allocator.hpp>

#include "circular_buffer_wrap.cpp"

int main ()
{
  using namespace boost::interprocess;
  try{
    shared_memory_object::remove("MySharedMemory");
    managed_shared_memory segment (create_only, "MySharedMemory", 65536);

    typedef allocator<int, managed_shared_memory::segment_manager> ShmemAllocator;

    //Alias a vector that uses the previous STL-like allocator
    typedef boost::circular_buffer_space_optimized<int, ShmemAllocator> MyBuffer;

    //Initialize shared memory STL-compatible allocator
    const ShmemAllocator alloc_inst (segment.get_segment_manager());

    //Construct a shared memory
    MyBuffer *mybuffer =
      segment.construct<MyBuffer>("MyBuffer") //object name
      (alloc_inst);//first ctor parameter

    //Insert data in the vector from RabbitMQ server
    for(int i = 0; i < 5; ++i){
      mybuffer->push_front(i);
    }
  }
  catch(...){
    shared_memory_object::remove("MySharedMemory");
    throw;
  }
  shared_memory_object::remove("MySharedMemory");
  return 0;
}

