#include <boost/interprocess/shared_memory_object.hpp>
#include <boost/interprocess/mapped_region.hpp>
#include <boost/interprocess/allocators/allocator.hpp> 
#include <iostream>
#include <cstring>

int main ()
{
  using namespace boost::interprocess;
  try{
    //Erase previous shared memory
    shared_memory_object::remove("shared_memory");

    //Create a shared memory object.
    shared_memory_object shm (create_only, "shared_memory", read_write);

    //Set size
    shm.truncate(1000);

    //Map the whole shared memory in this process
    mapped_region region(shm, read_write);

#include <boost/interprocess/managed_shared_memory.hpp> 
#include <boost/interprocess/allocators/allocator.hpp> 
#include <boost/interprocess/containers/string.hpp> 
#include <iostream> 

    int main() 
    { 
      boost::interprocess::shared_memory_object::remove("Highscore"); 
      boost::interprocess::managed_shared_memory managed_shm(boost::interprocess::open_or_create, "Highscore", 1024); 
      typedef boost::interprocess::allocator<char, boost::interprocess::managed_shared_memory::segment_manager> CharAllocator; 
      typedef boost::interprocess::basic_string<char, std::char_traits<char>, CharAllocator> string; 
      string *s = managed_shm.find_or_construct<string>("String")("Hello!", managed_shm.get_segment_manager()); 
      s->insert(5, ", world"); 
      std::cout << *s << std::endl; 
    } 
    //Write all the memory to 1
    std::memset(region.get_address(), 1, region.get_size());
  }
  catch(interprocess_exception &ex){
    shared_memory_object::remove("shared_memory");
    std::cout << ex.what() << std::endl;
    return 1;
  }
  shared_memory_object::remove("shared_memory");
  return 0;
}
