#include <boost/interprocess/managed_shared_memory.hpp>
#include <boost/interprocess/offset_ptr.hpp>

#include <vector>
#include <list>

template <class T>
class message_list :public list {
public:
  using namespace boost::interprocess;
  typedef list< vector<T> > message_list;
  message_list() {
    try{
      shared_memory_object::remove("message_list");
      managed_shared_memory segment(create_only, "message_list", 65536);
    }
    catch(interprocess_exception &ex){
      std::cout << "Unexpected exception: " << ex.what() << std::endl;
      return 1;
    }
  }

  ~message_list() {
    try{
      shared_memory_object::remove("message_list");
    }
    catch(interprocess_exception &ex){
      std::cout << "Unexpected exception: " << ex.what() << std::endl;
      return 1;
    }
  }
  
  
  offset_ptr<list_node> prev = 0, current, first;
  int i;
  for(i = 0; i < 10; ++i, prev = current){
    current = static_cast<list_node*>(segment.allocate(sizeof(list_node)));
  }


