
;; ==========================================
;; key bindings
;; ==========================================

;; toggle-truncate-lines ON an OFF
(global-set-key [f12] 'toggle-truncate-lines)

;; revert-buffer
(global-set-key [f11] 'revert-buffer)

;; Goto another buffer
(global-set-key [f1] 'other-window)

;; Repeat macro
( global-set-key [f2] 'call-last-kbd-macro)

;; Show all buffers
(global-set-key [f3] 'list-buffers)

;; Create numbered backups
(global-set-key [f4] '"\C-u\C-u\C-u\C-x\C-s")

;; Set cursor color
(set-cursor-color "magenta")

;; isearch-forward keybindings
(global-set-key [(control s)] 'isearch-forward)

;; keys for buffer creation and navigation
(global-set-key [(control x) (control b)] 'iswitchb-buffer)
(global-set-key [(control x) (f)] 'find-file)

;; goto line function C-c C-g
(global-set-key [ (control c) (control g) ] 'goto-line)

;; Rotates among colors in background-color-rotation
(defvar background-color-rotation
  '("red" "green" "yellow" "blue" "cyan" "black")
   "List of background color names to rotate")
(defun next-background-color ()
  "Rotates among colors in background-color-rotation."
  (set-variable 'background-color-rotation
                (append (cdr background-color-rotation)
                        (list (car background-color-rotation))))
  (car background-color-rotation))
(define-key global-map [f10]
  (lambda ()
    (interactive)
    (set-face-background 'default (next-background-color))))

;; ==============================
;; set frames default behavior
;; ==============================
;; start in full window
(setq initial-frame-alist
      '((width . 137) (height . 65)
	(top . 0) (left . 0)
	(background-color . "Black")
	(foreground-color . "White")
	(cursor-color  . "LightSkyBlue")
	(mouse-color  . "LightSkyBlue")))

(setq default-frame-alist
      '((top . 0) (left . 10)
        (width . 137) (height . 65)
	(foreground-color . "white")
        (background-color . "black")
	(font . "-Misc-Fixed-Medium-R-Normal--15-140-75-75-C-90-ISO8859-1")))

(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)

;; Highlight matched parenthesis
(setq show-paren-style 'mixed)
(setq show-paren-delay 0)		;Show the matching immediately
(setq blink-matching-paren t)
(setq show-paren-mode t)
(load-file "~/EMACS/lib/highlight-parentheses.el")
(require 'highlight-parentheses)

;; Allow completions like em-s-region to complete to emacspeak-speak-region
(partial-completion-mode)

;; truncate long lines
(setq-default truncate-lines nil)
(setq truncate-partial-width-windows nil)

;; Save desktop state
;;(descktop-save-mode 1)
(desktop-load-default)
(desktop-read)

;; Save position in the visited file
(setq toggle-save-place t)

;; ============================
;; Mouse Settings
;; ============================

;; mouse button one drags the scroll bar
(global-set-key [vertical-scroll-bar down-mouse-1] 'scroll-bar-drag)

;; setup scroll mouse settings
(defun up-slightly () (interactive) (scroll-up 5))
(defun down-slightly () (interactive) (scroll-down 5))
(global-set-key [mouse-4] 'down-slightly)
(global-set-key [mouse-5] 'up-slightly)

(defun up-one () (interactive) (scroll-up 1))
(defun down-one () (interactive) (scroll-down 1))
(global-set-key [S-mouse-4] 'down-one)
(global-set-key [S-mouse-5] 'up-one)

(defun up-a-lot () (interactive) (scroll-up))
(defun down-a-lot () (interactive) (scroll-down))
(global-set-key [C-mouse-4] 'down-a-lot)
(global-set-key [C-mouse-5] 'up-a-lot)

;; ============================
;; Display
;; ============================

;; disable startup message
(setq inhibit-startup-message t)

;; setup font
(set-default-font
 "-Misc-Fixed-Medium-R-Normal--15-140-75-75-C-90-ISO8859-1")

;; Show column number at bottom of screen
(column-number-mode 1)
;; turn the line numbers on
(line-number-mode 1)

;; alias y to yes and n to no
(defalias 'yes-or-no-p 'y-or-n-p)

;; highlight matches from searches
(setq isearch-highlight t)
(setq search-highlight t)
(setq-default transient-mark-mode t)

(when (fboundp 'blink-cursor-mode)
  (blink-cursor-mode -1))

(if (= 21 emacs-major-version)
    (load-file "~/EMACS/lib//xterm-256color.el"))

(set-face-background 'menu "cyan")
(set-face-background 'mode-line "black")
(set-face-foreground 'mode-line "gray90")
(set-face-background 'mode-line-inactive "white")
(set-face-foreground 'mode-line-inactive "black")
(set-face-background 'tool-bar "lightsteelblue")
;;(set-face-background 'font-lock-comment-face "darkkhaki")
(set-face-background 'font-lock-comment-face "black")
;; ===========================
;; Behaviour
;; ===========================

;; Delete recursively non-empty directories
;; 'nil means no recursive deletes. (default)
;; 'top means ask for each directory at the top level but delete subdirectories without asking.
;; 'always means delete recursively without asking.
(setq dired-recursive-deletes 'top)
(setq dired-recursive-copies (quote always))
;; do not open additional buffers for new dirs
;; (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
(put 'dired-find-alternate-file 'disabled nil)

;; Pgup/dn will return exactly to the starting point.
(setq scroll-preserve-screen-position 1)

;; don't automatically add new lines when scrolling down at
;; the bottom of a buffer
(setq next-line-add-newlines nil)

;; scroll just one line when hitting the bottom of the window
(setq scroll-step 1)
(setq scroll-conservatively 1)

;; format the title-bar to always include the buffer name
(setq frame-title-format "emacs - %b")

;; turn off the menu
(menu-bar-mode  -1)

;; turn off the toolbar
(if (>= emacs-major-version 21)
    (tool-bar-mode -1))


;; replace highlighted text with what I type rather than just
;; inserting at a point
(delete-selection-mode t)

;; resize the mini-buffer when necessary
(setq resize-minibuffer-mode t)

;; highlight during searching
(setq query-replace-highlight t)

;; highlight incremental search
(setq search-highlight t)

;; ==========================================
;; use cperl mode instead of perl
;; ==========================================
(add-to-list 'auto-mode-alist '("\\.[Pp][LlMm]$" . cperl-mode))
(setq cperl-invalid-face nil)
(setq cperl-font-lock nil)

(add-hook 'cperl-mode-hook
	  '(lambda ()
	     (define-key cperl-mode-map [return] 'newline-and-indent)))

(setq cperl-electric-keywords t) ;; expands for keywords such as foreach, while, etc...

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(cperl-array-face ((t (:foreground "green" :weight normal))))
 '(cperl-hash-face ((t (:foreground "Red" :slant normal :weight normal))))
 '(ediff-current-diff-face-Ancestor ((((class color) (min-colors 16)) (:background "VioletRed" :foreground "green"))))
 '(ediff-even-diff-face-A ((((class color) (min-colors 16)) (:background "light grey" :foreground "gray50"))))
 '(ediff-even-diff-face-C ((((class color) (min-colors 16)) (:background "light grey" :foreground "yellow"))))
 '(ediff-fine-diff-face-B ((((class color) (min-colors 16)) (:background "cyan" :foreground "cyan3"))))
 '(ediff-fine-diff-face-C ((((class color) (min-colors 16)) (:background "Turquoise" :foreground "green4"))))
 '(ediff-odd-diff-face-B ((((class color) (min-colors 16)) (:background "light grey" :foreground "blue"))))
 '(mode-line-inactive ((t (:inherit mode-line :background "purple" :foreground "white"))))
 '(widget-field-face ((((type tty)) (:background "yellow3" :foreground "cyan"))))
 '(widget-single-line-field-face ((((type tty)) (:background "green3" :foreground "violet")))))

;; ============================
;; COMINT customization
;; ============================
(setq comint-input-ring-size 20000)
;; hide passwords
(add-hook 'comint-output-filter-functions 'comint-watch-for-password-prompt)
;; Don't show ^M when on windows machines in plain shell mode
(add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
;; truncate shell buffer to comint-buffer-maximum-size
(add-hook 'comint-output-filter-functions 'comint-truncate-buffer)
;; set maximum-buffer size for shell-mode
(setq comint-buffer-maximum-size 10240)
;; don't allow shell prompt to be erased
(setq comint-prompt-read-only nil)
;; controls whether successive identical inputs are stored in the input history
(setq comint-input-ignoredups t)
;;Command completion normally considers only executable files. It considers nonexecutable files as well.
(setq shell-completion-execonly nil)

(copy-face 'default 'comint-highlight-prompt)
(set-face-foreground 'comint-highlight-prompt "firebrick1")
(set-face-background 'comint-highlight-prompt "black")

;; ============================
;; HIDE-SHOW mode
;; ============================

;; hideshow for programming
(load-library "hideshow")
(add-hook 'cperl-mode-hook 'hs-minor-mode)

;; Hide the comments too when you do a 'hs-hide-all'
(setq hs-hide-comments nil)
;; Set whether isearch opens folded comments, code, or both
;; where x is code, comments, t (both), or nil (neither)
(setq hs-isearch-open 'x)

;; ============================
;; Buffer Navigation
;; ============================

;; Iswitchb is much nicer for inter-buffer navigation.
(cond ((fboundp 'iswitchb-mode)		; GNU Emacs 21
       (iswitchb-mode 1))
      ((fboundp 'iswitchb-default-keybindings) ; Old-style activation
       (iswitchb-default-keybindings))
      (t nil))				; Oh well.

;; ============================
;; AutoSave & BackUp options
;; ============================
(setq backup-by-copying nil)
(setq backup-by-copying-when-linked t)
(setq backup-by-copying-when-mismatch t)

(setq make-backup-files t)
(setq version-control t)
(setq kept-new-versions 100)
(setq kept-old-versions 100)
(setq delete-old-versions t)
(setq dired-kept-versions 100)

;; =====================================
;; Put autosave files in one place not
;; scattered all over the file system!
;; =====================================
(setq auto-save-default t
      delete-auto-save-files nil
      auto-save-timeout nil) ; turn off timeout autosave to reduce junk files

(defvar autosave-dir "~/backups/autosave/")

(defun auto-save-file-name-p (filename)
  (string-match "^#.*#$" (file-name-nondirectory filename)))

(defun make-auto-save-file-name ()
  (concat autosave-dir
	  (if buffer-file-name
	      (concat "#" (file-name-nondirectory buffer-file-name) "#")
	    (expand-file-name
	     (concat "#%" (buffer-name) "#")))))

;; Put backup files (ie foo~) in one place too. (The backup-directory-alist
;; list contains regexp=>directory mappings; filenames matching a regexp are
;; backed up in the corresponding directory. Emacs will mkdir it if necessary.)
(defvar backup-dir "~/backups/my_baks/")
(setq backup-directory-alist (list (cons "." backup-dir)))

;; ============================
;; use cscope for browsing
;; ============================
;;(setq cscope-do-not-update-database t)
(load-file "~/EMACS/lib/xcscope.el")
(require 'xcscope)

;; ============================
;; load htmlize.el
;; ============================
(load-file "~/EMACS/lib/htmlize.el")
(require 'htmlize)

;; ============================
;; load mode-line.pl
;; ============================
(setq file-name-abbreviation-alist
      (list
       (cons  (concat "^" (expand-file-name "~") "/")  "~/")
       '("^.*/\\([^/]*/\\)" . "\\1")))

(load-file "~/EMACS/lib/view.el")
(load-file "~/EMACS/lib/mode-line.el")
(require 'mode-line)

;; ============================
;; load SSH
;; ============================
(load-file "~/EMACS/lib/ssh.el")
(require 'ssh)

;; ============================
;; load TRAMP customizations
;; ============================
(require 'tramp)
(require 'tramp-util)
(load-file "~/EMACS/lib/tramp_settings.el")
(require 'tramp_settings)

;; ============================
;; load Eshell
;; ============================
(load-file "~/EMACS/lib/eshell_starter_kit.el")
(require 'starter-kit-eshell)
;; default promt is too long
(setq eshell-prompt-function
      (lambda ()
        (concat (file-name-nondirectory (eshell/pwd)) " $ ")))
(setq eshell-history-size 10000)

;; ============================
;; SHELL mode
;; ============================
;; If you want Shell mode to handle color output from shell commands, you can enable ANSI Color mode. Here is how to do this:
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'sh-mode-hook
	  '(lambda ()
	     (define-key sh-mode-map [tab] 'sh-indent-line)
	     (define-key sh-mode-map [(shift tab)] (lambda () (interactive) (insert "\t" )))
	     (define-key sh-mode-map [return] 'newline-and-indent)))

;; ============================
;; SQL mode
;; ============================
(setq sql-user "cvarakin")
(setq sql-server "iapp026.iil.intel.com")
(setq sql-database "gsr_fcpv")
(setq sql-mysql-options (list "--local-infile" "--disable-auto-rehash" "-P 3306"))
(setq sql-password "insert")
(load-file "~/EMACS/lib/sql-indent.el")
(require 'sql-indent)

;; ============================
;; GDB mode
;; ============================
(add-hook 'gdb-mode-hook
	  (lambda ()
	    (setq gdb-many-windows 'nil)
	    (setq display-buffer-reuse-frames 't)
	    (setq pop-up-frames 'nil)
	    (setq pop-up-windows 'nil)
	    (define-key gud-mode-map [f9] 'gdb-many-windows)
	    (setq gdb-use-separate-io-buffer 'nil)
	    (setq tool-bar-mode 't)
	    (setq gud-gdb-command-name "gdb --fullname")
	    ))

;; ============================
;; MAKEFILE mode
;; ============================
(defun makefile-mode-hook ()
  (interactive)
  (setq show-trailing-whitespace t))
(add-hook 'makefile-mode-hook 'makefile-mode-hook)

;; ============================
;; COMPILE mode
;; ============================
;; compilation; if compilation is successful, autoclose the compilation win
;; http://www.emacswiki.org/cgi-bin/wiki/ModeCompile
;; TODO: don't hide when there are warnings either (not just errors)
(setq compilation-window-height 12)
(setq compilation-finish-functions 'compile-autoclose)
(defun compile-autoclose (buffer string)
  (cond ((and (string-match "finished" string)
	      (not (string-match "warning" string))
	      (not (string-match "grep" buffer)))
	 (message "Build maybe successful: closing window.")
	 (run-with-timer 2 nil
			 'delete-window
			 (get-buffer-window buffer t)))
	(t (message "Compilation exited abnormally: %s" string))))
(require 'compile)


;; ============================
;; EDIFF mode
;; ============================
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq ediff-split-window-function 'split-window-vertically)
(setq ediff-ignore-similar-regions 't)
;; Some custom configuration to ediff
(defvar my-ediff-bwin-config nil "Window configuration before ediff.")
(defcustom my-ediff-bwin-reg ?b
  "*Register to be set up to hold `my-ediff-bwin-config'
    configuration.")

(defvar my-ediff-awin-config nil "Window configuration after ediff.")
(defcustom my-ediff-awin-reg ?e
  "*Register to be used to hold `my-ediff-awin-config' window
    configuration.")

(defun my-ediff-bsh ()
  "Function to be called before any buffers or window setup for
    ediff."
  (setq my-ediff-bwin-config (current-window-configuration))
  (when (symbolp my-ediff-bwin-reg)
    (set-register my-ediff-bwin-reg
		  (list my-ediff-bwin-config (point-marker)))))

(defun my-ediff-ash ()
  "Function to be called after buffers and window setup for ediff."
  (setq my-ediff-awin-config (current-window-configuration))
  (when (symbolp my-ediff-awin-reg)
    (set-register my-ediff-awin-reg
		  (list my-ediff-awin-config (point-marker)))))

(defun my-ediff-qh ()
  "Function to be called when ediff quits."
  (when my-ediff-bwin-config
    (set-window-configuration my-ediff-bwin-config)))

(add-hook 'ediff-before-setup-hook 'my-ediff-bsh)
(add-hook 'ediff-after-setup-windows-hook 'my-ediff-ash 'append)
(add-hook 'ediff-quit-hook 'my-ediff-qh)


;; ==========================================
;; TEXT mode
;; ==========================================

(defun my-text-mode-hook ()
 (interactive)
 (set-fill-column 130)	      ; lines are 100 chars long ...
 (auto-fill-mode t)		; ... and wrapped around automagically
 )

(add-hook 'text-mode-hook 'my-text-mode-hook)
(setq default-major-mode 'text-mode)
;;(setq-default auto-fill-function 'do-auto-fill)

(add-hook 'tcl-mode-hook
	  '(lambda ()
	     (define-key tcl-mode-map [return] 'newline-and-indent)))

;; ==========================================
;; LISTBUF mode
;; ==========================================
(load "~/EMACS/lib/listbuf.el")
;;(require 'listbuf)
;;(load "listbuf.el")

;; ==========================================
;; HASKELL mode
;; ==========================================
(load "~/EMACS/lib/haskell-mode/haskell-site-file.el")
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
(add-hook 'haskell-mode-hook 'font-lock-mode)
(load "~/EMACS/lib/haskell-mode/haskell-ghci.el")
(add-hook 'haskell-mode-hook 'turn-on-haskell-ghci)

;; ==========================================
;; GOOGLE mode
;; ==========================================
(setq load-path (cons "~/EMACS/lib/g-client/" load-path))
(load-library "g")
(when (locate-library "g")
(autoload 'gblogger-sign-in "g" "Resets client so you can start with a different userid." t)
(autoload 'gblogger-blog "g" "Retrieve and display feed of feeds after authenticating." t)
(eval-after-load 'g
'(progn
(setq g-user-email "kostya.varakin@gmail.com")
(setq gcal-user-email "kostya.varakin@gmail.com")
(setq gblogger-user-email "kostya.varakin@gmail.com")
(setq browse-url-browser-function 'w3m-browse-url))))
(setq g-html-handler 'w3m-buffer)

;; ==========================================
;; W3M mode
;; ==========================================
(require 'w3m-load)
(setq browse-url-browser-function 'w3m-browse-url)
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
;; optional keyboard short-cut
(setq w3m-use-cookies t)

;; ==========================================
;; SVN mode
;; ==========================================
(require 'psvn)

;; ============================
;; My functions
;; ============================

(defun goto-column-number (number)
"Untabify, and go to a column number within the current line (1 is beginning
of the line)."
(interactive "nColumn number ( - 1 == C) ? ")
(beginning-of-line)
(untabify (point-min) (point-max))
(while (> number 1)
 (if (eolp)
     (insert ? )
   (forward-char))
 (setq number (1- number))
 )
)
(global-set-key [(control x) (control y)] 'goto-column-number)


(defun load-perl-template () (interactive)
  (insert "#! /usr/intel/bin/perl5.10-threads-64 -w

############################################################
##                                                        ##
##                                                        ##
## Author: Kostya Varakin                                 ##
## mail:   constantine.varakin@intel.com                  ##
## work:   972-4-8656310                                  ##
##                                                        ##
############################################################

BEGIN {
  push @INC, \"/nfs/iil/home/cvarakin/w/DEBUG_lib/\";
  use Config;
  $Config{useithreads} or die \"Recompile Perl with threads to run this program.\";
}
use debug_cvarakin;
use diagnostics;
use strict;
use warnings;
use Carp qw/cluck carp croak confess/;
$Carp::MaxEvalLen = 0;
$Carp::MaxArgLen  = 0;
$Carp::MaxArgNums = 0;

use IO::File;
use threads ('yield',
	     'stack_size' => 64*4096,
	     'exit' => 'threads_only',
	     'stringify');
use threads::shared;
use Thread::Semaphore;
use Thread::Queue;
use Data::Dumper;
use POSIX \":sys_wait_h\";
use POSIX qw/strftime/;
use Devel::Peek;
use File::Copy;
use File::Path;
use File::stat;
use Cwd;
use File::Temp qw/tempfile/; # get tempfile name + ilehandle
use IPC::open3; # open pipe to system cmd and gather control on it STDIN,STDOUT,STDERR
use Symbol;   # manipulate Perl symbols and their names. Symbol::gensym  creates an anonymous glob and returns a reference to it. Such a glob reference can be used as a file or directory handle.
use Storable; # store and retrieve variables from files
use feature \"state\";		# for state (persistent) variables

package main;

# parse command line
sub parse_cl() {
  use Getopt::Long;
  my ($debug_level, $verbose_level);
  local $SIG{__DIE__} = \ sub {print \"Get DIE signal\\n\"; &print_usage};
  local $SIG{__WARN__} = sub {print \"Warn in usage: @_\\n\"};
  GetOptions ('debug:i'      => \\$debug_level,
	      'verbose:i'    => \\$verbose_level,
	      'help|?'       => \\&print_usage,
	      '<>'           => \\&print_usage);
  $debug_level ||= 0;
  $verbose_level ||= 0;
#  die \"-input_file $input_file does not exist or not readable or zero sized\"
#    if (!-e $input_file || -z $input_file || !-r $input_file);
  return ($debug_level, $verbose_level);
}

sub print_usage() {
  print STDERR \"-debug\\n-verbose\\n-help\\n\";
  exit 1
}

# END package main
")
  )

(set-face-foreground 'font-lock-comment-face "Yellow" )
(set-variable font-lock-comment-face 'font-lock-comment-face)

(set-face-foreground 'font-lock-string-face "palegreen" )
(set-variable font-lock-comment-face 'font-lock-comment-face)

;;ASCII table function
(defun ascii-table ()
  "Print the ascii table. Based on a defun by Alex Schroeder <asc@bsiag.com>"
  (interactive)  (switch-to-buffer "*ASCII*")  (erase-buffer)
  (insert (format "ASCII characters up to number %d.\n" 254))  (let ((i 0))
    (while (< i 254)      (setq i (+ i 1))
      (insert (format "%4d %c\n" i i))))  (beginning-of-buffer))

;;run the current perl program
(defun run-perl ()
  (interactive "*")
  (setq perl-buffer-name buffer-file-name)
  (shell)
  (setq perl-run-command "/usr/intel/bin/perl5.10-threads-64 -w ")
  (insert perl-run-command)
  (insert perl-buffer-name)
)

;;check syntacsis of the current perl program
(defun check-perl ()
  (interactive "*")
  (setq perl-buffer-name buffer-file-name)
  (shell)
  (setq perl-run-command "/usr/intel/bin/perl5.10-threads-64 -w -c ")
  (insert perl-run-command)
  (insert perl-buffer-name)
)
;;debug the current perl program
(defun debug-perl ()
  (interactive "*")
  (setq perl-buffer-name buffer-file-name)
  (shell)
  (setq perl-run-command "/usr/intel/bin/perl5.10-threads-64 -w -dt ")
  (insert perl-run-command)
  (insert perl-buffer-name)
)


(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(backup-by-copying-when-mismatch t)
 '(gnus-mouse-face (quote highlight))
 '(speedbar-mode-specific-contents-flag t)
 '(speedbar-show-unknown-files t)
 '(speedbar-smart-directory-expand-flag t)
 '(speedbar-supported-extension-expressions (quote (".[ch]\\(\\+\\+\\|pp\\|c\\|h\\|xx\\)?" ".tex\\(i\\(nfo\\)?\\)?" ".el" ".emacs" ".l" ".lsp" ".p" ".java" ".f\\(90\\|77\\|or\\)?" ".ada" ".pl" ".tcl" ".m" ".scm" ".pm" ".py" ".s?html" "Makefile\\(\\.in\\)?" ".e")))
 '(speedbar-use-imenu-flag t)
 '(speedbar-visiting-file-hook nil)
 '(verilog-auto-endcomments t)
 '(verilog-auto-save-policy (quote ask))
 '(verilog-compiler "vlog ")
 '(verilog-coverage "vsim -coverage")
 '(verilog-indent-level 2)
 '(verilog-indent-level-declaration 2)
 '(verilog-indent-level-module 2)
 '(verilog-simulator "vsim")
 '(verilog-tab-to-comment nil)
 '(vhdl-indent-tabs-mode t))



