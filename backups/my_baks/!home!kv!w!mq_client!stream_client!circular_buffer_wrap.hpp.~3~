
#include <boost/thread/mutex.hpp>
#include <boost/thread/condition.hpp>
#include <boost/thread/thread.hpp>
#include <boost/call_traits.hpp>
#include <boost/progress.hpp>
#include <boost/bind.hpp>

#include <boost/circular_buffer.hpp>

template <class T>
class circular_buffer_wrap {
public:
  typedef boost::circular_buffer_space_optimized<T> container_type;
  typedef typename container_type::size_type size_type;
  typedef typename container_type::value_type value_type;
  typedef typename boost::call_traits<value_type>::param_type param_type;

  explicit circular_buffer_wrap(size_type capacity);

  void push_front(param_type item);
  void pop_back(value_type* pItem);

private:
  circular_buffer_wrap(const circular_buffer_wrap&);              // Disabled copy constructor
  circular_buffer_wrap& operator = (const circular_buffer_wrap&); // Disabled assign operator

  bool is_not_empty() const { return m_unread > 0; }
  bool is_not_full() const { return m_unread < m_container.capacity(); }

  size_type m_unread;
  container_type m_container;
  boost::mutex m_mutex;
  boost::condition m_not_empty;
  boost::condition m_not_full;
};

